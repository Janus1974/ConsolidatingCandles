
//@version=6
indicator("Price Action Trend and Consolidating Candles", overlay=true)

// === Inputs ===
groupTrend="Trend"
lookback_hours = input.int(24, title = 'Lookback Period (Hours)', minval = 1, group = groupTrend) // Default is 36 hours
swingStrength = input.int(5, title = 'Swing Strength', minval = 1, group = groupTrend) // Higher = smoother, fewer swings
plotSwings = input.bool(false, title = 'Plot Swing Points', group = groupTrend) // Option to plot swing points

// === Calculate Lookback in Bars ===
var int lookback = na
if timeframe.isintraday
    lookback := lookback_hours * 60 / timeframe.multiplier // Convert hours to bars based on current timeframe
    lookback

// === Swing Highs and Lows ===
swingHigh = ta.pivothigh(high, swingStrength, swingStrength)
swingLow = ta.pivotlow(low, swingStrength, swingStrength)

// === Store swing points ===
var array<float> swingHighs = array.new_float()
var array<float> swingLows = array.new_float()
var array<int> swingHighIndexes = array.new_int()
var array<int> swingLowIndexes = array.new_int()

if not na(swingHigh)
    array.push(swingHighs, swingHigh)
    array.push(swingHighIndexes, bar_index)

if not na(swingLow)
    array.push(swingLows, swingLow)
    array.push(swingLowIndexes, bar_index)

// === Clean up old swing highs beyond lookback
i = array.size(swingHighIndexes) - 1
while i >= 0
    if bar_index - array.get(swingHighIndexes, i) > lookback
        array.remove(swingHighs, i)
        array.remove(swingHighIndexes, i)
    i := i - 1
    i

// === Clean up old swing lows beyond lookback
j = array.size(swingLowIndexes) - 1
while j >= 0
    if bar_index - array.get(swingLowIndexes, j) > lookback
        array.remove(swingLows, j)
        array.remove(swingLowIndexes, j)
    j := j - 1
    j

// === Determine Trend ===
isUptrend = false
isDowntrend = false

if array.size(swingHighs) >= 2 and array.size(swingLows) >= 2
    hh = true
    hl = true
    lh = true
    ll = true

    for k = 1 to array.size(swingHighs) - 1 by 1
        hh := hh and array.get(swingHighs, k) > array.get(swingHighs, k - 1)
        lh := lh and array.get(swingHighs, k) < array.get(swingHighs, k - 1)
        lh

    for k = 1 to array.size(swingLows) - 1 by 1
        hl := hl and array.get(swingLows, k) > array.get(swingLows, k - 1)
        ll := ll and array.get(swingLows, k) < array.get(swingLows, k - 1)
        ll

    isUptrend := hh and hl
    isDowntrend := lh and ll
    isDowntrend

// === Text and Color for Trend Status ===
trendText = isUptrend ? 'Uptrend' : isDowntrend ? 'Downtrend' : 'No Clear Trend'
trendColor = isUptrend ? color.green : isDowntrend ? color.red : color.gray

var table trendTable = table.new(position.top_right, 1, 1, bgcolor=trendColor)
table.cell(trendTable, 0, 0, 'Trend: ' + trendText, text_color=color.white, bgcolor = trendColor )

// === Optional: Mark Swing Points ===
// Plot swing points outside of local scope
plotshape(series = not na(swingHigh) and plotSwings, location = location.abovebar, color = color.orange, style = shape.triangledown, size = size.small, title = 'Swing High')
plotshape(series = not na(swingLow) and plotSwings, location = location.belowbar, color = color.teal, style = shape.triangleup, size = size.small, title = 'Swing Low')

// === Consolidation Detection ===
pipSize = str.contains(syminfo.tickerid, "JPY") ? 0.20 : 0.0015
boxColorBelowThreshold = input.color(defval=color.red, title="Box Color Below Threshold", group="Consolidation")
boxColorAboveThreshold = input.color(defval=color.green, title="Box Color Above Threshold", group="Consolidation")
percentageThreshold = input.float(defval=90, title="Percentage Threshold", minval=0, maxval=100, group="Consolidation")

lookback30min = input.int(title="30 Min Lookback", defval=32, group="Consolidation Lookbacks")
lookback1hr = input.int(title="1 Hour Lookback", defval=24, group="Consolidation Lookbacks")
lookback2hr = input.int(title="2 Hour Lookback", defval=12, group="Consolidation Lookbacks")
lookback4hr = input.int(title="4 Hour Lookback", defval=12, group="Consolidation Lookbacks")

// var int lookback = na
if (timeframe.isintraday)
    if (timeframe.multiplier == 30)
        lookback := lookback30min
    else if (timeframe.multiplier == 60)
        lookback := lookback1hr
    else if (timeframe.multiplier == 120)
        lookback := lookback2hr
    else if (timeframe.multiplier == 240)
        lookback := lookback4hr

var float top = na
var float bottom = na
var int left = na
var int right = na
var float middle = na
var float percentageWithinBox = na
var int barsWithinBox = 0

// Ensure that lookback is greater than 0 and valid before using it
if not na(lookback) and lookback > 0 and bar_index > lookback
    middle := (high[1] + low[1]) / 2
    top := middle + pipSize / 2
    bottom := middle - pipSize / 2
    left := bar_index - lookback + 1
    right := bar_index - 1
    barsWithinBox := 0

    // Iterate from 1 to lookback, ensuring the range is valid and greater than 0
    for p = 1 to lookback - 1
        if high[p] >= bottom and low[p] <= top
            barsWithinBox += 1

    percentageWithinBox := (barsWithinBox / lookback) * 100
    color backgroundColor = percentageWithinBox >= percentageThreshold ? boxColorBelowThreshold : boxColorAboveThreshold

    var box b = na
    box.delete(b)
    b := box.new(left, top, right, bottom, border_color=color.new(backgroundColor, 80), border_width=2, bgcolor=color.new(backgroundColor, 80))

// === Timer ===
showTimer = input.bool(true, title="Show Countdown Timer", group="Timer")
timerTextSize = input.string("small", title="Timer Text Size", options=["small", "normal", "large"], group="Timer")
timerTextColor = input.color(color.white, title="Timer Text Color", group="Timer")
timerBgColor = input.color(color.blue, title="Timer Background Color", group="Timer")

secondsLeft = (time_close - timenow) / 1000
timer_hh = int(secondsLeft / 3600)
timer_mm = int((secondsLeft % 3600) / 60)
timer_ss = int(secondsLeft % 60)
timeLeft = str.tostring(timer_hh, "00") + ":" + str.tostring(timer_mm, "00") + ":" + str.tostring(timer_ss, "00")

var table timerTable = table.new(position.bottom_right, 1, 1, bgcolor=timerBgColor)
if showTimer
    table.cell(timerTable, 0, 0, "Next Candle: " + timeLeft, text_color=timerTextColor, text_size=timerTextSize)
