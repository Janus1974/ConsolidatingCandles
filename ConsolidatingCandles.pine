//@version=6
indicator("Consolidating Candles", overlay=true)

// Define the pip size based on the symbol
var float pipSize = str.contains(syminfo.tickerid, "JPY") ? 0.20 : 0.0015

// Input parameters for colors and percentage threshold
color boxColorBelowThreshold = input.color(color.red, title="Box Color Below Threshold")
color boxColorAboveThreshold = input.color(color.green, title="Box Color Above Threshold")
float percentageThreshold = input.float(90, title="Percentage Threshold", minval=0, maxval=100)
bool showTable = input.bool(true, title="Show Table")
// bool debug = input.bool(true, title="Debug Mode")
int lookback30min = input.int(title = "30 Min Lookback", defval = 32, group = "Lookbacks")
int lookback1hr = input.int(title = "1 Hour Lookback", defval = 24, group = "Lookbacks")
int lookback2hr = input.int(title = "2 Hour Lookback", defval = 12, group = "Lookbacks")
int lookback4hr = input.int(title = "4 Hour Lookback", defval = 9, group = "Lookbacks")

// Determine the lookback period based on the chart's timeframe
var int lookback = na
if (timeframe.isintraday)
    if (timeframe.multiplier == 30)
        lookback := lookback30min
    else if (timeframe.multiplier == 60)
        lookback := lookback1hr
    else if (timeframe.multiplier == 120)
        lookback := lookback2hr
    else if (timeframe.multiplier == 240)
        lookback := lookback4hr

// Initialize variables
var float top = na
var float bottom = na
var int left = na
var int right = na
var float middle = na
var float percentageWithinBox = na
var int barsWithinBox = 0

// Only proceed if the chart is is not a known timeframe
if (not na(lookback) and bar_index > lookback) 

    // Get the coordinates for the square
    middle := (high[1] + low[1]) / 2
    top := middle + pipSize / 2
    bottom := middle - pipSize / 2
    left := bar_index - lookback + 1
    right := bar_index - 1

    // Initialize barsWithinBox
    barsWithinBox := 0
    // Count the number of bars within the box
    for i = 1 to lookback
        if (high[i] >= bottom and low[i] <= top)
            barsWithinBox := barsWithinBox + 1
            if (debug)
                label.new(x = bar_index - i, y = na, yloc=yloc.belowbar, text="In Box", style=label.style_label_up, color=color.new(color.blue, 0), textcolor=color.white)

    // Calculate the percentage of bars within the box
    percentageWithinBox := (barsWithinBox / lookback) * 100

    // Determine the background color based on the percentage of bars within the box
    color backgroundColor = percentageWithinBox >= percentageThreshold ? boxColorBelowThreshold : boxColorAboveThreshold

    // Draw the box with the background color and 30% opacity
    var box b = na
    box.delete(b)
    b := box.new(left, top, right, bottom, border_color=color.new(backgroundColor, 80), border_width=2, bgcolor=color.new(backgroundColor, 80))

    // Create and update the table
    if (showTable)
        var table tbl = table.new(position.top_right, 1, 3, border_width=1)
        table.cell(tbl, 0, 0, text="Candles within box: " + str.tostring(barsWithinBox), text_color=color.white, bgcolor=color.black)
        table.cell(tbl, 0, 1, text="Percentage: " + str.tostring(percentageWithinBox) + "%", text_color=color.white, bgcolor=color.black)
        table.cell(tbl, 0, 2, text="Lookback: " + str.tostring(lookback) + " Candles", text_color=color.white, bgcolor=color.black)